{"version":3,"sources":["Data/navRoutes.js","components/Pre.js","components/NavbarFinal/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["navRoutes","to","text","exact","comp","lazy","Pre","props","id","load","NavbarFinal","useState","expand","updateExpanded","navColour","updateNavbar","window","addEventListener","scrollY","Navbar","expanded","fixed","className","Container","Brand","href","style","color","paddingTop","Toggle","aria-controls","onClick","Collapse","Nav","defaultActiveKey","map","item","index","Item","Link","as","FooterF","App","upadateLoad","useEffect","timer","setTimeout","clearTimeout","basename","process","fallback","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAWaA,G,kBAAY,CACrB,CAEIC,GAAK,IACLC,KAAM,OACNC,OAAO,EACPC,KAVKC,gBAAK,kBAAM,wDAYpB,CAEIJ,GAAK,SACLC,KAAM,QACNC,OAAO,EACPC,KAhBMC,gBAAK,kBAAM,iCAkBrB,CAEIJ,GAAK,YACLC,KAAM,WACNC,OAAO,EACPC,KAtBSC,gBAAK,kBAAM,yDCLbC,MAJf,SAAaC,GACX,OAAO,qBAAKC,GAAID,EAAME,KAAO,YAAc,oB,wBC2D9BC,MAnDf,WAAwB,IAAD,EACcC,oBAAS,GADvB,mBACZC,EADY,KACJC,EADI,OAEeF,oBAAS,GAFxB,mBAEZG,EAFY,KAEDC,EAFC,KAcnB,OAFAC,OAAOC,iBAAiB,UARxB,WACQD,OAAOE,SAAW,GAClBH,GAAa,GAEbA,GAAa,MAOjB,cAACI,EAAA,EAAD,CACIC,SAAUR,EACVS,MAAM,MACNT,OAAO,KACPU,UAAWR,EAAY,SAAW,SAJtC,SAMI,eAACS,EAAA,EAAD,WACI,cAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,IAAnB,SACI,oBAAIH,UAAU,iBAAiBI,MAAO,CAAEC,MAAO,QAASC,WAAY,OAApE,4BAEJ,cAACT,EAAA,EAAOU,OAAR,CACIC,gBAAc,wBACdC,QAAS,WACLlB,GAAeD,GAAiB,eAIxC,cAACO,EAAA,EAAOa,SAAR,CAAiBxB,GAAG,wBAApB,SACI,cAACyB,EAAA,EAAD,CAAKX,UAAU,UAAUY,iBAAiB,QAA1C,SACKlC,EAAUmC,KAAI,SAACC,EAAMC,GAAP,OACX,cAACJ,EAAA,EAAIK,KAAL,UACI,cAACL,EAAA,EAAIM,KAAL,CAEIC,GAAID,IACJtC,GAAImC,EAAKnC,GAHb,SAIKmC,EAAKlC,MAHDmC,kBCnCnCI,EAAUpC,gBAAK,kBAAM,+DA+BZqC,MA7Bf,WAAgB,IAAD,EACe/B,oBAAS,GADxB,mBACNF,EADM,KACAkC,EADA,KAWb,OARAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,GAAY,KACX,MAEH,OAAO,kBAAMI,aAAaF,MACzB,IAGD,eAAC,IAAD,CAAQG,SAAUC,gBAAlB,UACE,cAAC,EAAD,CAAWxC,KAAMA,IACjB,sBAAKa,UAAU,MAAMd,GAAIC,EAAO,YAAc,SAA9C,UACE,cAAC,EAAD,IACA,eAAC,WAAD,CAAUyC,SAAU,cAAC,EAAD,CAAWzC,MAAM,IAArC,UACE,cAAC,IAAD,UACGT,EAAUmC,KAAI,SAACC,EAAMC,GAAP,OACb,cAAC,IAAD,CAAOc,KAAMf,EAAKnC,GAAImD,QAAS,cAAChB,EAAKhC,KAAN,WAGnC,cAACqC,EAAD,cCvBKY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2446e4ef.chunk.js","sourcesContent":["// import {\n//     AiOutlineHome,\n//     AiOutlineFundProjectionScreen,\n//     AiOutlineUser,\n// } from \"react-icons/ai\";\nimport { lazy } from \"react\";\n\nconst Home = lazy(() => import(\"../components/Home\"));\nconst About = lazy(() => import(\"../components/About\"));\nconst Projects = lazy(() => import(\"../components/Projects\"));\n\nexport const navRoutes = [\n    {\n        // icon : <AiOutlineHome style={{ marginBottom: \"2px\" }}/>,\n        to : \"/\",\n        text: \"Home\",\n        exact: true,\n        comp: Home\n    },\n    {\n        // icon : <AiOutlineUser style={{ marginBottom: \"2px\" }}/>,\n        to : \"/about\",\n        text: \"About\",\n        exact: true,\n        comp: About\n    },\n    {\n        // icon : <AiOutlineFundProjectionScreen style={{ marginBottom: \"2px\" }}/>,\n        to : \"/projects\",\n        text: \"Projects\",\n        exact: true,\n        comp: Projects\n    },\n//     {\n//         icon : <CgFileDocument style={{ marginBottom: \"2px\" }}/>,\n//         to : \"/resume\",\n//         text: \"Resume\",\n//         exact: true,\n//         comp: Resume\n//     }\n]","function Pre(props) {\n  return <div id={props.load ? \"preloader\" : \"preloader-none\"}></div>;\n}\n\nexport default Pre;\n","import { useState } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Container from \"react-bootstrap/Container\";\nimport { Link } from \"react-router-dom\";\n\nimport { navRoutes } from \"../../Data/navRoutes\";\n\n\nfunction NavbarFinal() {\n    const [expand, updateExpanded] = useState(false);\n    const [navColour, updateNavbar] = useState(false);\n\n    function scrollHandler() {\n        if (window.scrollY >= 20) {\n            updateNavbar(true);\n        } else {\n            updateNavbar(false);\n        }\n    }\n\n    window.addEventListener(\"scroll\", scrollHandler);\n\n    return (\n        <Navbar\n            expanded={expand}\n            fixed=\"top\"\n            expand=\"md\"\n            className={navColour ? \"sticky\" : \"navbar\"}\n        >\n            <Container>\n                <Navbar.Brand href=\"/\">\n                    <h3 className=\"img-fluid logo\" style={{ color: \"white\", paddingTop: \"8px\" }}>Kritika Shah</h3>\n                </Navbar.Brand>\n                <Navbar.Toggle\n                    aria-controls=\"responsive-navbar-nav\"\n                    onClick={() => {\n                        updateExpanded(expand ? false : \"expanded\");\n                    }}\n                >\n                </Navbar.Toggle>\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"ml-auto\" defaultActiveKey=\"#home\">\n                        {navRoutes.map((item, index) => (\n                            <Nav.Item>\n                                <Nav.Link\n                                    key={index}\n                                    as={Link}\n                                    to={item.to}>\n                                    {item.text}\n                                </Nav.Link>\n                            </Nav.Item>\n                        ))}\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default NavbarFinal;\n","import { lazy, Suspense, useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nimport \"./style.css\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { navRoutes } from \"./Data/navRoutes\";\n\nimport Preloader from \"../src/components/Pre\";\nimport NavbarFinal from \"./components/NavbarFinal\";\nconst FooterF = lazy(() => import(\"./components/FooterF\"));\n\nfunction App() {\n  const [load, upadateLoad] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      upadateLoad(false);\n    }, 1200);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Preloader load={load} />\n      <div className=\"App\" id={load ? \"no-scroll\" : \"scroll\"}>\n        <NavbarFinal />\n        <Suspense fallback={<Preloader load={true} />}>\n          <Routes>\n            {navRoutes.map((item, index) => (\n              <Route path={item.to} element={<item.comp />} />\n            ))}\n          </Routes>\n          <FooterF />\n        </Suspense>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport 'semantic-ui-css/semantic.min.css'\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}